{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/DEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract DEX is ReentrancyGuard {\r\n    IERC20 public token;\r\n    uint256 public totalLiquidity;\r\n    mapping(address => uint256) public liquidity;\r\n\r\n    event EthToTokenSwap(\r\n        address indexed swapper,\r\n        uint256 tokenOutput,\r\n        uint256 ethInput\r\n    );\r\n\r\n    event TokenToEthSwap(\r\n        address indexed swapper,\r\n        uint256 tokensInput,\r\n        uint256 ethOutput\r\n    );\r\n\r\n    event LiquidityProvided(\r\n        address indexed liquidityProvider,\r\n        uint256 liquidityMinted,\r\n        uint256 ethInput,\r\n        uint256 tokensInput\r\n    );\r\n\r\n    event LiquidityRemoved(\r\n        address indexed liquidityRemover,\r\n        uint256 liquidityWithdrawn,\r\n        uint256 tokensOutput,\r\n        uint256 ethOutput\r\n    );\r\n\r\n    constructor(address token_addr) {\r\n        token = IERC20(token_addr);\r\n    }\r\n\r\n    function init(uint256 tokens) public payable returns (uint256) {\r\n        require(totalLiquidity == 0, \"DEX: already initialized\");\r\n        require(msg.value > 0 && tokens > 0, \"Cannot initialize with zero\");\r\n        require(token.transferFrom(msg.sender, address(this), tokens), \"DEX: transfer failed\");\r\n        totalLiquidity = address(this).balance;\r\n        liquidity[msg.sender] = totalLiquidity;\r\n        emit LiquidityProvided(msg.sender, totalLiquidity, msg.value, tokens);\r\n        return totalLiquidity;\r\n    }\r\n\r\n    function getLiquidity(address lp) public view returns (uint256) {\r\n        return liquidity[lp];\r\n    }\r\n\r\n    function price(uint256 inputAmount, uint256 inputReserve, uint256 outputReserve) public pure returns (uint256) {\r\n        require(inputReserve > 0 && outputReserve > 0, \"Invalid reserves\");\r\n        uint256 inputAmountWithFee = inputAmount * 997;\r\n        uint256 numerator = inputAmountWithFee * outputReserve;\r\n        uint256 denominator = (inputReserve * 1000) + inputAmountWithFee;\r\n        return numerator / denominator;\r\n    }\r\n\r\n    function ethToToken() public payable returns (uint256) {\r\n        require(msg.value > 0, \"Must send ETH to swap\");\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n        uint256 tokensBought = price(msg.value, address(this).balance - msg.value, tokenReserve);\r\n        require(token.transfer(msg.sender, tokensBought), \"DEX: failed to transfer tokens\");\r\n        emit EthToTokenSwap(msg.sender, tokensBought, msg.value);\r\n        return tokensBought;\r\n    }\r\n\r\n    function tokenToEth(uint256 tokens) public nonReentrant returns (uint256) {\r\n        require(tokens > 0, \"Must send tokens to swap\");\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance);\r\n        (bool sent,) = msg.sender.call{value: ethBought}(\"\");\r\n        require(sent, \"DEX: failed to send Ether\");\r\n        require(token.transferFrom(msg.sender, address(this), tokens), \"DEX: failed to transfer tokens\");\r\n        emit TokenToEthSwap(msg.sender, tokens, ethBought);\r\n        return ethBought;\r\n    }\r\n\r\n    function deposit() public payable returns (uint256 tokensDeposited) {\r\n        require(msg.value > 0, \"Must deposit ETH\");\r\n        uint256 ethReserve = address(this).balance - msg.value;\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n        uint256 tokenAmount = (msg.value * tokenReserve) / ethReserve;\r\n        require(token.transferFrom(msg.sender, address(this), tokenAmount), \"Failed to transfer tokens\");\r\n\r\n        uint256 liquidityMinted = (msg.value * totalLiquidity) / ethReserve;\r\n        liquidity[msg.sender] += liquidityMinted;\r\n        totalLiquidity += liquidityMinted;\r\n\r\n        emit LiquidityProvided(msg.sender, liquidityMinted, msg.value, tokenAmount);\r\n        return tokenAmount;\r\n    }\r\n\r\n    function withdraw(uint256 liquidityAmount) public nonReentrant returns (uint256 ethAmount, uint256 tokenAmount) {\r\n        require(liquidity[msg.sender] >= liquidityAmount, \"Not enough liquidity\");\r\n\r\n        uint256 ethReserve = address(this).balance;\r\n        uint256 tokenReserve = token.balanceOf(address(this));\r\n\r\n        ethAmount = (liquidityAmount * ethReserve) / totalLiquidity;\r\n        tokenAmount = (liquidityAmount * tokenReserve) / totalLiquidity;\r\n\r\n        liquidity[msg.sender] -= liquidityAmount;\r\n        totalLiquidity -= liquidityAmount;\r\n\r\n        (bool ethSent,) = msg.sender.call{value: ethAmount}(\"\");\r\n        require(ethSent, \"Failed to send ETH\");\r\n        require(token.transfer(msg.sender, tokenAmount), \"Failed to transfer tokens\");\r\n\r\n        emit LiquidityRemoved(msg.sender, liquidityAmount, ethAmount, tokenAmount);\r\n        return (ethAmount, tokenAmount);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}